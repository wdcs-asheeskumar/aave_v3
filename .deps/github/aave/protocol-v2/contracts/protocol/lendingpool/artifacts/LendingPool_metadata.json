{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "borrowRateMode",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "borrowRate",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "referral",
						"type": "uint16"
					}
				],
				"name": "Borrow",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "referral",
						"type": "uint16"
					}
				],
				"name": "Deposit",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "target",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "initiator",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "premium",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "FlashLoan",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidatedCollateralAmount",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "liquidator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "receiveAToken",
						"type": "bool"
					}
				],
				"name": "LiquidationCall",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Paused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "RebalanceStableBorrowRate",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "repayer",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Repay",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "stableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowRate",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "liquidityIndex",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "variableBorrowIndex",
						"type": "uint256"
					}
				],
				"name": "ReserveDataUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "ReserveUsedAsCollateralDisabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "ReserveUsedAsCollateralEnabled",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					}
				],
				"name": "Swap",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [],
				"name": "Unpaused",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "reserve",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "Withdraw",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "FLASHLOAN_PREMIUM_TOTAL",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "LENDINGPOOL_REVISION",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_NUMBER_RESERVES",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_STABLE_RATE_BORROW_SIZE_PERCENT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "borrow",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "deposit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceFromBefore",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "balanceToBefore",
						"type": "uint256"
					}
				],
				"name": "finalizeTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "receiverAddress",
						"type": "address"
					},
					{
						"internalType": "address[]",
						"name": "assets",
						"type": "address[]"
					},
					{
						"internalType": "uint256[]",
						"name": "amounts",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "modes",
						"type": "uint256[]"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "params",
						"type": "bytes"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "flashLoan",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAddressesProvider",
				"outputs": [
					{
						"internalType": "contract ILendingPoolAddressesProvider",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.ReserveConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getReserveData",
				"outputs": [
					{
						"components": [
							{
								"components": [
									{
										"internalType": "uint256",
										"name": "data",
										"type": "uint256"
									}
								],
								"internalType": "struct DataTypes.ReserveConfigurationMap",
								"name": "configuration",
								"type": "tuple"
							},
							{
								"internalType": "uint128",
								"name": "liquidityIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "variableBorrowIndex",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentLiquidityRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentVariableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint128",
								"name": "currentStableBorrowRate",
								"type": "uint128"
							},
							{
								"internalType": "uint40",
								"name": "lastUpdateTimestamp",
								"type": "uint40"
							},
							{
								"internalType": "address",
								"name": "aTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "stableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "variableDebtTokenAddress",
								"type": "address"
							},
							{
								"internalType": "address",
								"name": "interestRateStrategyAddress",
								"type": "address"
							},
							{
								"internalType": "uint8",
								"name": "id",
								"type": "uint8"
							}
						],
						"internalType": "struct DataTypes.ReserveData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getReserveNormalizedIncome",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					}
				],
				"name": "getReserveNormalizedVariableDebt",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getReservesList",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserAccountData",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalCollateralETH",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "totalDebtETH",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "availableBorrowsETH",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "currentLiquidationThreshold",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "ltv",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "healthFactor",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getUserConfiguration",
				"outputs": [
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "data",
								"type": "uint256"
							}
						],
						"internalType": "struct DataTypes.UserConfigurationMap",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "aTokenAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "stableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "variableDebtAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "interestRateStrategyAddress",
						"type": "address"
					}
				],
				"name": "initReserve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "contract ILendingPoolAddressesProvider",
						"name": "provider",
						"type": "address"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "collateralAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "debtAsset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "debtToCover",
						"type": "uint256"
					},
					{
						"internalType": "bool",
						"name": "receiveAToken",
						"type": "bool"
					}
				],
				"name": "liquidationCall",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "paused",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "rebalanceStableBorrowRate",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "repay",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "configuration",
						"type": "uint256"
					}
				],
				"name": "setConfiguration",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "val",
						"type": "bool"
					}
				],
				"name": "setPause",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "rateStrategyAddress",
						"type": "address"
					}
				],
				"name": "setReserveInterestRateStrategyAddress",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "useAsCollateral",
						"type": "bool"
					}
				],
				"name": "setUserUseReserveAsCollateral",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					}
				],
				"name": "swapBorrowRateMode",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "asset",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdraw",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Aave*",
			"details": "Main point of interaction with an Aave protocol's market - Users can:   # Deposit   # Withdraw   # Borrow   # Repay   # Swap their loans between variable and stable rate   # Enable/disable their deposits as collateral rebalance stable rate borrow positions   # Liquidate positions   # Execute Flash Loans - To be covered by a proxy contract, owned by the LendingPoolAddressesProvider of the specific market - All admin functions are callable by the LendingPoolConfigurator contract defined also in the   LendingPoolAddressesProvider",
			"kind": "dev",
			"methods": {
				"FLASHLOAN_PREMIUM_TOTAL()": {
					"details": "Returns the fee on flash loans "
				},
				"MAX_NUMBER_RESERVES()": {
					"details": "Returns the maximum number of reserves supported to be listed in this LendingPool"
				},
				"MAX_STABLE_RATE_BORROW_SIZE_PERCENT()": {
					"details": "Returns the percentage of available liquidity that can be borrowed at once at stable rate"
				},
				"borrow(address,uint256,uint256,uint16,address)": {
					"details": "Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower already deposited enough collateral, or he was given enough allowance by a credit delegator on the corresponding debt token (StableDebtToken or VariableDebtToken) - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet   and 100 stable/variable debt tokens, depending on the `interestRateMode`",
					"params": {
						"amount": "The amount to be borrowed",
						"asset": "The address of the underlying asset to borrow",
						"interestRateMode": "The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable",
						"onBehalfOf": "Address of the user who will receive the debt. Should be the address of the borrower itself calling the function if he wants to borrow against his own collateral, or the address of the credit delegator if he has been given credit delegation allowance*",
						"referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man"
					}
				},
				"deposit(address,uint256,address,uint16)": {
					"details": "Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens. - E.g. User deposits 100 USDC and gets in return 100 aUSDC",
					"params": {
						"amount": "The amount to be deposited",
						"asset": "The address of the underlying asset to deposit",
						"onBehalfOf": "The address that will receive the aTokens, same as msg.sender if the user   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens   is a different wallet",
						"referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*"
					}
				},
				"finalizeTransfer(address,address,address,uint256,uint256,uint256)": {
					"details": "Validates and finalizes an aToken transfer - Only callable by the overlying aToken of the `asset`",
					"params": {
						"amount": "The amount being transferred/withdrawn",
						"asset": "The address of the underlying asset of the aToken",
						"balanceFromBefore": "The aToken balance of the `from` user before the transfer",
						"balanceToBefore": "The aToken balance of the `to` user before the transfer",
						"from": "The user from which the aTokens are transferred",
						"to": "The user receiving the aTokens"
					}
				},
				"flashLoan(address,address[],uint256[],uint256[],address,bytes,uint16)": {
					"details": "Allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com",
					"params": {
						"amounts": "The amounts amounts being flash-borrowed",
						"assets": "The addresses of the assets being flash-borrowed",
						"modes": "Types of the debt to open if the flash loan is not returned:   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address",
						"onBehalfOf": "The address  that will receive the debt in the case of using on `modes` 1 or 2",
						"params": "Variadic packed params to pass to the receiver as extra information",
						"receiverAddress": "The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface",
						"referralCode": "Code used to register the integrator originating the operation, for potential rewards.   0 if the action is executed directly by the user, without any middle-man*"
					}
				},
				"getAddressesProvider()": {
					"details": "Returns the cached LendingPoolAddressesProvider connected to this contract*"
				},
				"getConfiguration(address)": {
					"details": "Returns the configuration of the reserve",
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The configuration of the reserve*"
					}
				},
				"getReserveData(address)": {
					"details": "Returns the state and configuration of the reserve",
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The state of the reserve*"
					}
				},
				"getReserveNormalizedIncome(address)": {
					"details": "Returns the normalized income per unit of asset",
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The reserve's normalized income"
					}
				},
				"getReserveNormalizedVariableDebt(address)": {
					"details": "Returns the normalized variable debt per unit of asset",
					"params": {
						"asset": "The address of the underlying asset of the reserve"
					},
					"returns": {
						"_0": "The reserve normalized variable debt"
					}
				},
				"getReservesList()": {
					"details": "Returns the list of the initialized reserves*"
				},
				"getUserAccountData(address)": {
					"details": "Returns the user account data across all the reserves",
					"params": {
						"user": "The address of the user"
					},
					"returns": {
						"availableBorrowsETH": "the borrowing power left of the user",
						"currentLiquidationThreshold": "the liquidation threshold of the user",
						"healthFactor": "the current health factor of the user*",
						"ltv": "the loan to value of the user",
						"totalCollateralETH": "the total collateral in ETH of the user",
						"totalDebtETH": "the total debt in ETH of the user"
					}
				},
				"getUserConfiguration(address)": {
					"details": "Returns the configuration of the user across all the reserves",
					"params": {
						"user": "The user address"
					},
					"returns": {
						"_0": "The configuration of the user*"
					}
				},
				"initReserve(address,address,address,address,address)": {
					"details": "Initializes a reserve, activating it, assigning an aToken and debt tokens and an interest rate strategy - Only callable by the LendingPoolConfigurator contract",
					"params": {
						"aTokenAddress": "The address of the VariableDebtToken that will be assigned to the reserve",
						"asset": "The address of the underlying asset of the reserve",
						"interestRateStrategyAddress": "The address of the interest rate strategy contract*",
						"stableDebtAddress": "The address of the StableDebtToken that will be assigned to the reserve"
					}
				},
				"initialize(address)": {
					"details": "Function is invoked by the proxy contract when the LendingPool contract is added to the LendingPoolAddressesProvider of the market. - Caching the address of the LendingPoolAddressesProvider in order to reduce gas consumption   on subsequent operations",
					"params": {
						"provider": "The address of the LendingPoolAddressesProvider*"
					}
				},
				"liquidationCall(address,address,address,uint256,bool)": {
					"details": "Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1 - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk",
					"params": {
						"collateralAsset": "The address of the underlying asset used as collateral, to receive as result of the liquidation",
						"debtAsset": "The address of the underlying borrowed asset to be repaid with the liquidation",
						"debtToCover": "The debt amount of borrowed `asset` the liquidator wants to cover",
						"receiveAToken": "`true` if the liquidators wants to receive the collateral aTokens, `false` if he wants to receive the underlying collateral asset directly*",
						"user": "The address of the borrower getting liquidated"
					}
				},
				"paused()": {
					"details": "Returns if the LendingPool is paused"
				},
				"rebalanceStableBorrowRate(address,address)": {
					"details": "Rebalances the stable interest rate of a user to the current stable rate defined on the reserve. - Users can be rebalanced if the following conditions are satisfied:     1. Usage ratio is above 95%     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been        borrowed at a stable rate and depositors are not earning enough",
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"user": "The address of the user to be rebalanced*"
					}
				},
				"repay(address,uint256,uint256,address)": {
					"params": {
						"amount": "The amount to repay - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`",
						"asset": "The address of the borrowed underlying asset previously borrowed",
						"onBehalfOf": "Address of the user who will get his debt reduced/removed. Should be the address of the user calling the function if he wants to reduce/remove his own debt, or the address of any other other borrower whose debt should be removed",
						"rateMode": "The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable"
					},
					"returns": {
						"_0": "The final amount repaid*"
					}
				},
				"setConfiguration(address,uint256)": {
					"details": "Sets the configuration bitmap of the reserve as a whole - Only callable by the LendingPoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the reserve",
						"configuration": "The new configuration bitmap*"
					}
				},
				"setPause(bool)": {
					"details": "Set the _pause state of a reserve - Only callable by the LendingPoolConfigurator contract",
					"params": {
						"val": "`true` to pause the reserve, `false` to un-pause it"
					}
				},
				"setReserveInterestRateStrategyAddress(address,address)": {
					"details": "Updates the address of the interest rate strategy contract - Only callable by the LendingPoolConfigurator contract",
					"params": {
						"asset": "The address of the underlying asset of the reserve",
						"rateStrategyAddress": "The address of the interest rate strategy contract*"
					}
				},
				"setUserUseReserveAsCollateral(address,bool)": {
					"details": "Allows depositors to enable/disable a specific deposited asset as collateral",
					"params": {
						"asset": "The address of the underlying asset deposited",
						"useAsCollateral": "`true` if the user wants to use the deposit as collateral, `false` otherwise*"
					}
				},
				"swapBorrowRateMode(address,uint256)": {
					"details": "Allows a borrower to swap his debt between stable and variable mode, or viceversa",
					"params": {
						"asset": "The address of the underlying asset borrowed",
						"rateMode": "The rate mode that the user wants to swap to*"
					}
				},
				"withdraw(address,uint256,address)": {
					"details": "Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC",
					"params": {
						"amount": "The underlying amount to be withdrawn   - Send the value type(uint256).max in order to withdraw the whole aToken balance",
						"asset": "The address of the underlying asset to withdraw",
						"to": "Address that will receive the underlying, same as msg.sender if the user   wants to receive it on his own wallet, or a different address if the beneficiary is a   different wallet"
					},
					"returns": {
						"_0": "The final amount withdrawn*"
					}
				}
			},
			"title": "LendingPool contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"repay(address,uint256,uint256,address)": {
					"notice": "Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			".deps/github/aave/protocol-v2/contracts/protocol/lendingpool/LendingPool.sol": "LendingPool"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		".deps/github/aave/protocol-v2/contracts/dependencies/openzeppelin/contracts/Address.sol": {
			"keccak256": "0xb7f2cd193efe93976d7b473fc4fa27dda83bd4db5b81889cbcd4701f3b7023ae",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://2275632637acd2f30d576612dcddc1c6ba78d81af4d044fafe870e6a809a8b6e",
				"dweb:/ipfs/QmW3uMzrLbjzP45zVpP8e9V6o8WFSceHiHq8WDMJ8YjCeL"
			]
		},
		".deps/github/aave/protocol-v2/contracts/dependencies/openzeppelin/contracts/IERC20.sol": {
			"keccak256": "0x6406b04abfeda2c8c80ea3faf797ce4501e66db41fb6ff4e299ebe0402879f44",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://33b0db81db37bd6fe20aa0b23581c6b0edef2f3c49d0bd88b4fe46c1164adb00",
				"dweb:/ipfs/QmYn1zYwt3ahpkLYwHh6h5b1UJrzP2xy5G3at9oEVNw2c1"
			]
		},
		".deps/github/aave/protocol-v2/contracts/dependencies/openzeppelin/contracts/SafeERC20.sol": {
			"keccak256": "0xd664a81c469ebd6c7b09ca8be499e6af30100e3e42be6bfea9f4a90c02a7cb1c",
			"license": "MIT",
			"urls": [
				"bzz-raw://c9f8ac1ffeaaefc7685abd544813e31ebb46e81b393291d68b1a99a9c7550df2",
				"dweb:/ipfs/QmP3xWkMNgDBbDn9HF6vVKpHTP5rW4j7dxWmhKsxicQ7Mg"
			]
		},
		".deps/github/aave/protocol-v2/contracts/dependencies/openzeppelin/contracts/SafeMath.sol": {
			"keccak256": "0xfca35d11bafb85cf4f2203b41f1a98238dca59b6a9faa28b86ea3f9f63da8ec5",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://7019345b024afa93000c6b5a2b095be59c3c5352eb658619c941d23d0af5bc65",
				"dweb:/ipfs/QmZLxJKSbM66Wd1Qd43jSdiXdg7JP6DQ9J6LuANUZummM4"
			]
		},
		".deps/github/aave/protocol-v2/contracts/flashloan/interfaces/IFlashLoanReceiver.sol": {
			"keccak256": "0x5d3699fb09fdcfd69dfb67538dc3a0711711ad0d1ff54723cb371a3359d64107",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://f86660197ef51242bf7d475376dab88b20b27d54eb59ba818881e208ccd8a8ac",
				"dweb:/ipfs/QmPpMtC1umHtnaq6dFwCgQkxdzWveXuGzN6ECVBHZ7obuy"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IAToken.sol": {
			"keccak256": "0x075d88d8db3fc9104b5305c9630fc7496a72d73ce2651a21dea6949b2b1cf39f",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://d3f0f4590b55abb6d5b009c623a496554b5778cdbaaae3759eb0aa5a598e8ef3",
				"dweb:/ipfs/QmNf4Fv7CaCEbRKs3KHcMzT123BYoL8qp7PrEmN6beYxaR"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IAaveIncentivesController.sol": {
			"keccak256": "0xaf1715fc0e27c5b1ec453688b584f0301d51fe0848e95f5d074c58ba1e8dcbce",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://73c0d5db6281b66180e61c5fd0a0a488e0287b03f88908f0b46af4f36039e299",
				"dweb:/ipfs/Qma4PaS8MbbnQornei7ZuXyBBmDpVfiSXQfeNNWXNWABSG"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IInitializableAToken.sol": {
			"keccak256": "0x912c36122a398266facaa3b55efc1836511a58c7750b7acad2ed542c08f8d0b6",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://1f776f76370fcd58173a54cc2d1a07a2a7fe6fa5ea4778f64c00260a37a277b3",
				"dweb:/ipfs/QmbotuTWT6qo9HhmUWTtA1GQzWQMWgLcQuALTxm8jRx5eu"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IInitializableDebtToken.sol": {
			"keccak256": "0x11332579eac479f3770daa651dc2613ef1784dee889affcba3571f2677b6aafe",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://3882cbc470759615731a2e3f08a103ac4abfd8ab64c8d0219f74024dccc2d67c",
				"dweb:/ipfs/QmRDqpyjddEzk6icPuD64W7JqeDp5aqfwsDMfr55dJNTkY"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/ILendingPool.sol": {
			"keccak256": "0x5fa85a3137312e0d37602723af7408ed97636028699bdf7a7c7cc2dc34cdbafc",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://2f084d52067cbb14f10a00813b17c386681e17e295f878d3d8992cef63e67ac1",
				"dweb:/ipfs/QmWGjEYp4ZHmMxW7zkV8ctsmpc5kAYDw3yqaf1LZGsFFuJ"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/ILendingPoolAddressesProvider.sol": {
			"keccak256": "0xcb0e2c4c19c0bde86907b6ab45b6a1db4932d3642fc51410d56c9411a65b9f1d",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://38d01c9e664c64d46a15bbbda2933b5fb877d33f6746d2db32563962beea9119",
				"dweb:/ipfs/QmajEmcQZz3E6GzmLpeGvnEswuwCjVYy8svqdx8bxi4PuG"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IPriceOracleGetter.sol": {
			"keccak256": "0xf81a1742c6cac8d98baeb7d6003cedc97eed9c362bc0156aa00033d04e673f3e",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://74eeb88f24e2375b5106b0e54987b564f2f9b7c753e8675997e326a29cdce154",
				"dweb:/ipfs/QmV2TScQgnSDZV5W2WCtQUD3Yk3tmZE7XcW37FAz9sXvUe"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IReserveInterestRateStrategy.sol": {
			"keccak256": "0x1b007cbc28eb4ec3ce444aae4011e5325e2cedfcdd994ec1b1dd2d6995e7f4b8",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://76d034d21fc6ceae0f426447b377c25834d78336649f3a90f67632aa257b9aa5",
				"dweb:/ipfs/QmTpHkBWK8SXiubdbwQBBUpYnPLFVzNMqy1wiw54n9L9jz"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IScaledBalanceToken.sol": {
			"keccak256": "0x03f77c8f37be8f08723b82ccc7c000da0152839632a5c3952c292a2ea0b1b491",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://c8cbe31d5cd705ef15b40c0d9a48dace17797a314fa1d8d93edd412537e8ac98",
				"dweb:/ipfs/QmYuKD5D5NVakZ41XRxHvMUXUG4Hn83E9YyxJMrMCjPZxd"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IStableDebtToken.sol": {
			"keccak256": "0x97e36122c39f183cc7ace6697c22799beaf90be5921e6810bbed342d4f3afe60",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://09161a2ebcc8f642e4f431212df13447d0e8cee3d509a3fdd1643014e0f138f6",
				"dweb:/ipfs/QmWo3qKxe61gL4z335DvvWJiFvp24b2597Ekf7bNuH27CV"
			]
		},
		".deps/github/aave/protocol-v2/contracts/interfaces/IVariableDebtToken.sol": {
			"keccak256": "0x6d55b9af0dfe1d0cb0324eecc1de9cf71eca63bcc92999ea405e4bfd7bcbc59a",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://72ac0f3c52e719ab3689ad811022e827deb8d2fb4d2aa2bf8903fb76c17b7fef",
				"dweb:/ipfs/QmYfZYL7R6Bc6LphMF77owhhrH9u1BRUAdxnGcZEtHdc7u"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/lendingpool/LendingPool.sol": {
			"keccak256": "0x15fa016910fa2d43b9c719b99ce2f18c3ae91b78b31da8534da1815426be3be5",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://654e2241706758e2c648af59abe3199d570409978d51a3541cf9d30bef79f308",
				"dweb:/ipfs/QmdNcWcR7FwPUJRFguPHE6CtG7qq3kQLUPago8KHiQ12Po"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/lendingpool/LendingPoolStorage.sol": {
			"keccak256": "0x24107e3cbdc63a21588fd455e9b01459a6254256840a5a67d0b6a1b247add3a3",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://a2b6140cb001381a634f8b6baed6844003f167870cc937375faf1e34eb54a028",
				"dweb:/ipfs/QmWDdgvvYY1s9ggep3W53v7zBzDzczfwq4beth6q8qebn9"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/aave-upgradeability/VersionedInitializable.sol": {
			"keccak256": "0x29712c302422dcd03a036df5fa6b34897982c35e943d59e9db0704142da0f892",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://d0bc9bed6b54b7b97c3a01123cee12de8f5c744575e1c231735ec7666db8ede7",
				"dweb:/ipfs/QmQUyz92ft5hM4CcwEduTgcMUgfmdimhUHaaLMzm6Gh8nh"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/configuration/ReserveConfiguration.sol": {
			"keccak256": "0x7e3691bd4353fea9391f96894241d929c6528fad315d21281725a1fe61600485",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://8b1beb77c3485458045a4079642cddd3bfe2fd27c87ac95fccde67d18ec21597",
				"dweb:/ipfs/QmV8HQGK6Gb9Va32tzGJ9a52jw2h1vbRJ1osx7bLW49LDi"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/configuration/UserConfiguration.sol": {
			"keccak256": "0xa17b77c331710ab7373cc905810f3b6861f865c59e06c8c929d9ffbe58d05c6f",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://6e6faf6aa17a2f0590d0acbe833b36dd46d9e29029e9e556dc56e6f415b07fc2",
				"dweb:/ipfs/QmdKrRVC6Lr2rAwRfJB855PqJKjHjPDFFKnqJwCidFtBm5"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/helpers/Errors.sol": {
			"keccak256": "0xfb70949637d81dc9a3883601bb15226981f4c4847f65035e64bf5d120994efeb",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://43fb108a5038fbeb33294d3f4a9e7e4e021bef16f0e7a8a2f3ad9142808c7a8f",
				"dweb:/ipfs/QmUvAnwcuwmprQu4g3r1k3gE2EztuVPGRKJBMVX3KRC8W6"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/helpers/Helpers.sol": {
			"keccak256": "0xd513d293086becdf6b507d50a334c6ecffdbffcc5a132f498e73357d89f08a93",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://eb8d7a37fdb4a8b585e6fb6a4bf7f1f73dfeb100a42e2afd2d143c898d6f30dd",
				"dweb:/ipfs/Qmc4iuJGKRDLy4Yik3deNyBmCkRnsBAo9t3UBheCXUSDmd"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/logic/GenericLogic.sol": {
			"keccak256": "0xaa4caa40c83d9e7a5a7cf30e8e782c338ca09be9d08546f440fe8979abea17e2",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://5ad88577c4da6c959efa59db06dc137a4635921c43cc4ea7334092dad37b7797",
				"dweb:/ipfs/QmfVWJxCGkjQcEgp6jpXFruP87pMsYazmNs7kegEZHKwha"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/logic/ReserveLogic.sol": {
			"keccak256": "0x88d08386cfa040713d0837d37fd4b0b3763ea3141b4e6145c31538ee1ddf8374",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://9f55c9b7019fc2b4641f266872c66733c8f331bd6687ef1de7f87170a078a8bc",
				"dweb:/ipfs/QmTgmXmrgaMvJnk6aCJKH2WjYEFmLuAzQLHFfXgqMx24fT"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/logic/ValidationLogic.sol": {
			"keccak256": "0x6569d41018650ffa7d2c1a9fb5591ff4714497b4c439e8384df82091862d6017",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://31f874085bc89643faa041167f5f4cdc686144b71587425ea0def8208004e409",
				"dweb:/ipfs/QmcH6Rttar7d3Cijgk7ScL8rSXxv519q2S4nw1xyTKL7e5"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/math/MathUtils.sol": {
			"keccak256": "0x631117c7e70631fc5b25b25f49bdcff11b53209c5c664567223cf59ea4a6c019",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://3761796e1a827d1ca020aa26a8ffcd7b6adf372d6f8313994321893bf70c5ea4",
				"dweb:/ipfs/QmZdjWvbESv62bShCnm7CRoajAUU9MbphHVb3qYEVxVBKp"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/math/PercentageMath.sol": {
			"keccak256": "0x3cc3b08aeee5b82a5f7b3958bae578e69f1b03a32fb9760ec21bdd1a9b109337",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://90b676cb885d38e6d47f11846c0c56166d28a95b4f90566b6230d2038f9f7c20",
				"dweb:/ipfs/QmPayXnuBpmkx5Y1ToShC9f8gjpFwgf2GWv9ngnvPPaBU7"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/math/WadRayMath.sol": {
			"keccak256": "0xf66b7e208da18d12ca2b6a5c9d58f8091819da1524c028f30a36304993039c72",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://75519c3d78ad40da70a1d24cf10557068d6726c894bbc6674531c73302ecc610",
				"dweb:/ipfs/Qmea7Q6ysFm9WH69EZLak7wCeT7Fcw4H9qMZGAUA52QoRf"
			]
		},
		".deps/github/aave/protocol-v2/contracts/protocol/libraries/types/DataTypes.sol": {
			"keccak256": "0xb1d3ae94d3e4b3bf23b3394d820a3a2b5ba56fd5389f561f3fdd73ed1c60c391",
			"license": "agpl-3.0",
			"urls": [
				"bzz-raw://47c11d578cc1e0df27e4e85cfe5831a48b78d6e939d34e17db4bc65a54c899fe",
				"dweb:/ipfs/QmYdYLkYFJe3psmQUH1S1uNhGE9xyxeDunuEW9gBPg9vDB"
			]
		}
	},
	"version": 1
}